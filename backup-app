#!/bin/bash
#
#TODO:
# - executar snapshot em paralelo

set -e

TOKEN_FILE="${TOKEN_FILE:-/etc/rhc-auth-token}"
BACKUP_DIR="${BACKUP_DIR:-/var/backup/getup}"

function usage()
{
	cat <<-EOF
		Backup de aplicações OpenShift. Informe o nome de uma ou mais aplicações (sem
		domínio) nos parâmetros.

		Use: ${0##*/} [--dir=/backup/root/dir] [--all|<application>,...]"

		  -a|--all         Faz backup de todas as aplicações.
		  -d|--dir=PATH    Define diretório raiz do backup (padrão: $BACKUP_DIR).
		  -l|--list        List os backups.

		Auth Token
		----------

		Crie um token de autorizacao (rhc authorization --help) com escopo apenas-leitura
		e armazene-o no arquivo $TOKEN_FILE.

		Exemplo de token com 12 meses de validade:

		  $ rhc authorization add --scopes read --note backup --expires-in \$((60*60*24*30*12))
		  $ sudo su -c "echo 'TOKEN-DE-AUTORIZACAO-GERADO-ACIMA' > $TOKEN_FILE"
		  $ sudo chmod 600 $TOKEN_FILE"

		Instalar
		--------

		Copie para um local do PATH e adicione a chamada na cron:

		  ## instalando
		  $ sudo cp -i backup-app /usr/sbin/
		  $ sudo chmod +x /usr/sbin/backup-app

		  ## incluindo na cron
		  $ sudo su -c 'echo "/usr/sbin/backup-app --all" > /etc/cron.daily/openshift-backup-app'
		  $ sudo su -c 'chmod +x /etc/cron.daily/openshift-backup-app'
	EOF
}

APPS=''
LIST=0
for OPT; do
	case "$1" in
		-l|--list) LIST=1;;
		-a|--all) APPS='*';;
		-d=*|--dir=*) BACKUP_DIR="`echo $1|cut -d= -f2`";;
		-*|--*) usage; exit 0;;
		*) APPS+="$1 "
	esac
	shift
done


# lista backups mostrando informacoes basicas
if [ "$LIST" -eq 1 ]; then
	if ! cd $BACKUP_DIR 2>/dev/null; then
		echo "$BACKUP_DIR: Diretorio raiz do backup nao existe"
		exit 0
	fi

	APPS=`ls -d1 */ 2>/dev/null`
	if [ -z "$APPS" ]; then
		echo "$BACKUP_DIR: Nenhum backup encontrado"
		exit 0
	fi

	MAXLEN=0
	for APP_DIR in $APPS; do
		[ ${#APP_DIR} -gt $MAXLEN ] && MAXLEN=${#APP_DIR}
	done

	{
	echo 'App | Gear-Id | Commit | Ultimo Backup'
	echo '--- | ------- | ------ | -------------'
	
	for APP_DIR in $APPS; do
		pushd $APP_DIR >/dev/null
		for APP_GEAR in */; do
			git log --format="${APP_DIR%/} | ${APP_GEAR%/} | %h | %ai (%ar)" -1
		done
		popd >/dev/null
	done
	} | column -t  -s\|
	exit 0
fi

set -u

echo Backup root dir: $BACKUP_DIR

#
# Le o conteudo de /etc/rhc-auth-token e guarda na variavel "token".
# Para gerar um novo token, execute o comando abaixo e copie o token para o arquivo /etc/rhc-auth-token
# O token criado tem validade de um ano.
#
#   $ rhc authorization add --scopes read --note backup --expires-in $((60*60*24*30*12))
if [ ! -r "$TOKEN_FILE" ]; then
	echo "Arquivo de token nao encontrado: $TOKEN_FILE"
	exit 1
fi

echo Auth token file: $TOKEN_FILE
TOKEN="$(<$TOKEN_FILE)"

SSH="`which ssh` -oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null"

echo

if [ -z "$APPS" ];  then
	echo 'Informe um ou mais nomes de aplicaçao ou use o parâmetro "--all"'
	echo "Para ajuda, digite:"
	echo "$0 --help"
	exit 1
elif [ "$APPS" == '*' ]; then
	# lista todos os apps
	APPS=`yes | rhc apps --token "$TOKEN" | awk '/^[a-zA-Z0-9]+ @ http/{print $1}'`
fi

for APP in $APPS; do
	# baixa snapshot, cria diretorio se nao existe

	DIR=$BACKUP_DIR/$APP
	[ -d $DIR ] || mkdir -p $DIR
	cd $DIR

	echo -n '--- '; date
	echo Baixando snapshot: $APP
	# baixa snapshot
	TIMESTAMP=$(date +%s.%N)
	TARGZ="snapshot-$APP-$TIMESTAMP.tar.gz"
	yes | rhc snapshot save --ssh "$SSH" --token "$TOKEN" --app "$APP" --filepath "$TARGZ" 2>&1 | awk '{print "--- " $0}'

	# testa retorno do rhc
	if [ ${PIPESTATUS[1]} -ne 0 ]; then
		echo "Snapshot falhou: $APP - $TIMESTAMP"
		exit 1
	fi

	# extrai e atualizar repositorio local de backup

	echo -n "Extraindo snapshot... "
	tar xzf $TARGZ
	rm -f $TARGZ
	echo feito

	echo -n "Atualizando backup... "
	{
		[ -d .git ] || git init
		git add .
		git commit -a -m "Backup automatico: $APP - $(date --date=@${TIMESTAMP})"
	} >/dev/null
	echo feito
done

